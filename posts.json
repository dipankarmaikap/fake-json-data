[
    {
        "id": 3529,
        "date": "2022-07-20T11:15:49",
        "modified": "2022-07-20T12:16:35",
        "slug": "headless-wordpress-and-seo",
        "status": "publish",
        "type": "post",
        "link": "https://dipankarmaikap.com/headless-wordpress-and-seo/",
        "title": {
            "rendered": "Headless WordPress and SEO"
        },
        "content": {
            "rendered": "\n<p>One of the main reasons for using WordPress for a site is SEO, next to ease of content editing. With the help of plugins like Yoast you can easily add seo for your content per page basis.&nbsp;</p>\n\n\n\n<h2>Context</h2>\n\n\n\n<p>For my project I&#8217;m using WordPress as my CMS and Yoast for SEO, using <a rel=\"noreferrer noopener\" href=\"https://www.wpgraphql.com/\" target=\"_blank\">WpGraphql</a> for data fetching and <a rel=\"noreferrer noopener\" href=\"https://nextjs.org/\" target=\"_blank\">NextJS</a> as my frontend stack.</p>\n\n\n\n<p>With the help of <a rel=\"noreferrer noopener\" href=\"https://github.com/ashhitch/wp-graphql-yoast-seo\" target=\"_blank\">WPGraphQL for Yoast SEO plugin</a>. Huge shout out to <a rel=\"noreferrer noopener\" href=\"https://twitter.com/ash_hitchcock\" target=\"_blank\">Ash Hitchcock</a> for this. You can get the Yoast SEO data in WPGraphQL and use it in your frontend.</p>\n\n\n\n<h2><strong>Get SEO data via graphql</strong></h2>\n\n\n\n<p>If you ever used WpGraphql this will look very familiar to you. For any page, post or any other custom post type you have all have this SEO field and with in that all the fields provided by Yoast.</p>\n\n\n\n<pre class=\"wp-block-code lang-js\"><code>query PageQuery {\r\n  page(id: \"/\", idType: URI) {\r\n    title\r\n    uri\r\n    seo {\r\n      title\r\n      metaDesc\r\n      canonical\r\n      metaKeywords\r\n      metaRobotsNofollow\r\n      opengraphModifiedTime\n      ....\r\n    }\r\n  }\r\n}</code></pre>\n\n\n\n<p>This is great now you can take this info and put it in your frontend sites head.</p>\n\n\n\n<h2>Easiest way to get the full SEO info</h2>\n\n\n\n<p>The above step is fine but what if we want all the SEO tags that Yoast generates/adds in each WordPress page. There is a field called <code>fullHead</code> that gives the raw SEO as a string for each page/post. We can use this in our sites head and this even have the structured data or <code>application/ld+json</code> included in it.</p>\n\n\n\n<pre class=\"wp-block-code lang-js\"><code>query PageQuery {\r\n  page(id: \"/\", idType: URI) {\r\n    title\r\n    uri\r\n    seo {\r\n      title\r\n      fullHead\r\n    }\r\n  }\r\n}</code></pre>\n\n\n\n<h2>Only one small problem</h2>\n\n\n\n<p>There is just one small problem with the above approach, If you check the string returned by <code>fullHead</code> closely you will see it points to the WordPress site not your frontend url. So if we can find a way to replace the WordPress urls with our frontend urls but not the media urls then we can use this and we dont have to manually add each tags.</p>\n\n\n\n<h2>The solution</h2>\n\n\n\n<p>Lets break down the problem so we know clearly what we have to do.</p>\n\n\n\n<ol><li>Replace all the wordpress urls with our frontend url.</li><li>We want to keep the media urls (eg: og:image) same.</li></ol>\n\n\n\n<pre class=\"wp-block-code lang-js\"><code>let wpUrl = 'https://yourwpsite.com';\nlet siteUrl = 'https://frontendsite.com';\nexport default function seoStringParser(data) {\n  data = data.replaceAll(wpUrl, () => siteUrl);\n  data = data.replaceAll(`${siteUrl}/wp-content`, \n  () => `${wpUrl}/wp-content`);\n  return data;\n}</code></pre>\n\n\n\n<p>The above function is going to recive the SEO string and we are going to do two replaces. First replaceAll is going to just replace the wp url with fronend url, this solves one problem, all the links are now pointing correctly except the media urls now they are wrong. So we have a second replaceAll that will select <code>${siteUrl}/wp-content</code> (here <code>/wp-content</code> in the end will help us to select only the media items) and replace it back with the wordpress url.</p>\n\n\n\n<h2>Add the Yoast data in your nextJS site</h2>\n\n\n\n<p>Finally, Now if you check the string its ready to put in our frontend sites head.</p>\n\n\n\n<pre class=\"wp-block-code lang-js\"><code>import Head from \"next/head\";\nimport parse from \"html-react-parser\";\nimport seoStringParser from \"~/utils/seoStringParser\"\n\nexport default function PageSEO({ seoData }) {\n  let { title, fullHead } = seoData;\n  return (\n    &lt;Head>\n      &lt;title>{title}&lt;/title>\n      {parse(seoStringParser(fullHead))}\n    &lt;/Head>\n  );\n}</code></pre>\n\n\n\n<p>Feel free to <a href=\"https://twitter.com/maikap_dipankar\" target=\"_blank\" rel=\"noreferrer noopener\">reach out to me</a> if you have any questions.</p>\n"
        },
        "excerpt": {
            "rendered": "<p>One of the main reasons for using WordPress for a site is SEO, next to ease of content editing. With the help of plugins like</p>\n"
        },
        "author": 1,
        "categories": [
            23
        ],
        "tags": []
    }
]